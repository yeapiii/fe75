// alert() - выводит модальное окно с сообщением.
// Пользователь не сможет продолжить работу,
// до тех пор, пока не нажмет на кнопку "ОК" в модальном окне.
// alert("Hello");

// ----------------------------------------------------------------------
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------

// document.write(...) — метод, выводящий на страницу переданные ему аргументы (параметры).
// Аргументов может быть любое количество, и они могут быть любых типов,
// при выводе значения аргументов преобразуются в строки.
// document.write("Hello");
// document.write("<h1>Hello</h1>");

// ----------------------------------------------------------------------
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------


// // Создаем переменную с именем - 'а' и присваиваем ей значение - 10.
// var a = 10;
// // Можно сначала объявить переменную
// var b;
// // а потом присвоить ей значение
// b = "Some string";
//
// alert(a);
// alert(b);
//
// // Правила которых стоит придерживаться при именовании перменных
// // 1. Нельзя в имени переменной использовать символ - пробел.
// //         alice variable - не правильно
// //
// // 2. Не начинайте имя переменной с числа
// //         1variable   - не правильно
// //         varia23ble1 - правильно
// //
// // 3. Переменная может начинаться с символа $
// //         $variable
// //
// // 4. При именовании часто используются правила camelCase или PascalCase


// ----------------------------------------------------------------------
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------

// Логический тип данных. (boolean)
// Данные хранящиеся в переменной булевого типа могут принимать два значения:
// истина (true) и ложь (false).
//
// Часто истина представляется единицей, а ложь — нулем.

// var a = true;
// var b = false;
//
// document.write(bool1 + "<br>");
// document.write(bool2 + "<br>");


// ----------------------------------------------------------------------
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------

// Null - это тип данных, указывающий на отсутствие объекта.
//
// В JavaScript null не является «ссылкой на несуществующий объект»
// или «нулевым указателем», как в некоторых других языках.
// Null - значение, аналогичное понятиям: «ничего» или «значение неизвестно».
// Null может получиться, когда в confirm() вы нажмете "Отмена"



// ----------------------------------------------------------------------
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------

// undefined - это тип данных, который используется для переменных или свойств объекта,
// значения для которых не существует или оно не присвоено.
//
// Единственным значением неопределенного типа, которое может иметь переменная,
// является значение undefined.

// var a;
//
// alert(a); // undefined
// alert(b); // Ошибка!


// ----------------------------------------------------------------------
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------

// Метод prompt(1, 2) - принимает два аргумента:
//     1 - выводится в качестве простой строки в модальном окне.
//     2 - значение по умолчанию в текстовом поле для ввода.
//
// Метод prompt(1, 2) - выводит сообщение в окне с текстовым полем и двумя кнопками: "ОК" и "ОТМЕНА".
//
// Метод prompt(1, 2) - возвращает введенное значение или null, если пользователь нажал на кнопку "ОТМЕНА".
//
// Как и в alert, prompt - модальное окно
// (пользователь не может продолжить работу, пока не нажмет на одну из кнопок).

// var name = prompt("Как вас зовут?","Иван");
// alert(name);

// ----------------------------------------------------------------------
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------


// confirm() - [подтвердить], действует похоже на alert, за исключением того,
// что добавляет кнопку "Отмена" в диалоговое окно.
// Возвращает true, если нажата кнопка - OK или false , если нажата кнопка - Cancel.

// var conf = confirm("Вы уверены?");
//
// alert(conf);


// ----------------------------------------------------------------------
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------

//Операторы

// var a = 9;
// var b = 5;
// var result;
//
// // Сложение (+)
// result = a + b; // в данном случае + арифметическое сложение.
// document.write("a + b = " + result + "<br>"); // в данном случае оператор + выполняет операцию конкатенации.
//
// // Вычитание (-)
// result = a - b; // в случае если a или b нечисловые, оператор пытается преобразовать их в числа.
// document.write("a - b = " + result + "<br>");
//
// // Умножение (*)
// result = a * b;
// document.write("a - b = " + result + "<br>");
//
// // Деление (/)
// result = a / b;
// document.write("a / b = " + result + "<br>"); // деление на 0 дает +/- бесконечность. 0/0 дает NaN.


// Конкатенация — операция склеивания объектов линейной структуры, обычно строк.

// var string1 = "Hello ";
// var string2 = 'World';
//
// var resString = string1 + string2; // конкатенация значений переменных string1 и string2
//
// document.write(string1 + "<br>");
// document.write(string2 + "<br>");
// document.write(resString + "<br>");
//
// var str = "10";
// var a = 1;
//
//
// // Все что складывается со строкой преобразовывается в строку.
// // И далее над этой строкой-числом производится операция конкатенации.
// document.write(str + a + "<br>");
//
// // Вычитание из числа строки невозможно, так как при любом операторе кроме "+" все аргументы будут пытаться преобразоваться в число
// // и далее над этим числом производится арифметическая операция.
// document.write(str - a + "<br>");
// document.write(str * "2" + "<br>");
// document.write(str / "2" + "<br>");

// ----------------------------------------------------------------------
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------


// Деление c остатком (Деление по модулю) - это операция,
// при которой возвращаемое значение является остатком от деления.

// var a = 9;
// var b = 5;
// var result;
//
// result = a % b;
// document.write("a % b = " + result + "<br>");


// ----------------------------------------------------------------------
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------


// Напомню, оператор "+" делает конкатенацию, если хотя бы один операнд - строка, причем, не обязательно первый.

// var a = -8;
// var string = "10";
//
// // Унарный минус (-)
// result = -a; // Операция смены знака на противоположный.
// document.write("-a = " + result + "<br>");
//
// // Унарный плюс (+)
// // не изменяет знака при применении к числовому типу (ничего не происходит).
// result = +a;
// document.write("+a = " + result + "<br>");
//
// // Унарный плюс (+)
// // при применении к строковому типу, преобразовывает его в числовой.
// result = +string + a;
// document.write("+string + a = " + result + "<br>");


// ----------------------------------------------------------------------
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------


// Инкремент — операция, во многих языках программирования используемая
// для увеличения значения переменной на единицу.

// var a = 9;

// document.write("Постфиксный инкремент <br>");
// document.write(a + "<br>");   // выведет 9
// a++;
// document.write(a + "<br>");   // выведет 10
// document.write(a++ + "<br>"); // выведет 10
// document.write(a + "<br>");   // выведет 11
//
// var b = 49;
// document.write("Префиксный инкремент <br>");
// document.write(b + "<br>");   // выведет 49
// ++b;
// document.write(b + "<br>");   // выведет 50
// document.write(++b + "<br>"); // выведет 51
// document.write(b + "<br>");   // выведет 51


// ----------------------------------------------------------------------
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------

// Оператор равенства "==" предназначен для сравнения значений двух переменных,
// при этом необходимо помнить о следующих правилах:
//
//      1. если одно значение null а другое undefined - значения равны.
//      2. если одно значение число, а второе строка, то строка преобразоваться в число и производиться сравнение.
//      3. если одно значение true оно преобразуется в 1, если значение false оно преобразоваться в 0.

// var a = 1;
// var b = "1";
// var c = true;
// var res;
//
// res = a == b;
// document.write("a равно b : " + res + "<br>");
//
// res = a == c;
// document.write("a равно c : " + res + "<br>");


// ----------------------------------------------------------------------
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------


// Идентичность (строгое равенство) - требует совпадения типа и значения переменной,
// когда для равенства достаточно только совпадающих значений.
//
// Оператор идентичности "===" предназначен для проверки значений двух переменных на идентичность,
// при этом необходимо помнить о следующих правилах:
//
//     1. если значения имеют разные типы они не идентичны.
//     2. если значения являются числами имеют одинаковые значения и не являются значения NaN - они идентичны.
//     3. если две строки имеют одинаковую длину и содержат одни и те же символы - они идентичны.
//     4. два одинаковых логических значения идентичны.

// var a = 1;
// var b = "1";
// var c = true;
// var res;
//
// res = a == b;
// document.write("a равно b : " + res + "<br>");
// res = a === b;
// document.write("a идентично b :" + res + "<br>");
//
// res = a == c;
// document.write("a равно c :" + res + "<br>");
// res = a === c;
// document.write("a идентично c :" + res + "<br>");


// ----------------------------------------------------------------------
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------


// Оператор неравенства "!=" возвращает противоположное значение оператора равенства.
// Оператор неидентичности "!==" возвращает противоположное значение оператора идентичности.

// var a = 1;
// var b = "1";
// var c = true;
// var res;
//
// res = a != b;
// document.write("a не равно b : " + res + "<br>");
//
// res = a !== b;
// document.write("a не идентично b : " + res + "<br>");
//
// res = a !== c;
// document.write("a не идентично c : " + res + "<br>");


// ----------------------------------------------------------------------
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------


// var a = 10;
// var b = 10;
// var res;
//
// // Меньше (<)
// res = a < b;
// document.write("a < b " + res + "<br>");
//
// // Больше (>)
// res = a > b;
// document.write("a > b " + res + "<br>");
//
// // Меньше или равно (<=)
// res = a <= b;
// document.write("a <= b " + res + "<br>");
//
// // Больше или равно (>=)
// res = a >= b;
// document.write("a >= b " + res + "<br>");

// ----------------------------------------------------------------------
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------

// Логическое И (&&) - возвращает true тогда и только тогда
// когда оба операнда равны true.
//
// Таблица истинности логического И (&&):
//         true  && true = true
//         false && true = false
//         true  && false = false
//         false && false = false

// var a = true;
// var b = !false;
//
// var res = a && b;
// document.write("a && b = " + res + "<br>");


// ----------------------------------------------------------------------
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------

// Логическое ИЛИ (||) - возвращает true,
// если первый или второй операнд (или оба) равны true.
//
// Таблица истинности логического ИЛИ (||):
//     true  || true = true
//     false || true = true
//     true  || false = true
//     false || false = false

// var a = !false;
// var b = false;
//
// var res = a || b;
// document.write("a || b = " + res + "<br>");

// ----------------------------------------------------------------------
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------

// if (выражение) {
//     Выполнится, если  выражение будет истинно (true)
// }

// var a = prompt("Сколько вам лет?", "18");
//
// if (a >= "18") {
//     document.write("<h1>Да вы уже взрослый</h1>");
// }
//
// document.write("Эта строка выполнится в любом случае");

// ----------------------------------------------------------------------
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------


// if (выражение) {
//         инструкция1 - выполнится - если выражение будет истинным
//    }
// else {
//         инструкция2 - выполнится - если выражение будет ложным
// }

// var a = prompt("Сколько вам лет?", "18");
//
// if (a >= "18") {
//     document.write("<h1>Да вы уже взрослый</h1>");
// }else{
//   document.write("<h1>Да вы еще ребенок</h1>");
// }
//
// document.write("Эта строка выполнится в любом случае");


// ----------------------------------------------------------------------
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------


// var a = prompt("Введите слово Hello, или World", "Hello");
//
// if (a == "Hello" || a == 'hello') {
//     document.write("Введенное значение верно и равно Hello");
// }
// else if (a == "World" || a == 'world') {    // Выполнится если выражение в первой конструкции будет false
//     document.write("Введенное значение верно и равно World");
// }
// else {
//     document.write("Введенное значение НЕ верно");
// }

// var a = prompt('Message', '');


// ----------------------------------------------------------------------
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------

// var trueVal = true;
// var falseVal = false;
//
// if (trueVal) {
//     document.write("Первый блок if выполнился");
// }
// else if (!falseVal) {
//     document.write("Второй блок else if выполнился");
// }
// else {
//     document.write("Ни один блок не выполнился");
// }

// ----------------------------------------------------------------------
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------

// Оператор многозначного выбора - switch-case (переключатель).

// // Предлагаем пользователю ввести число и принимаем ввод от пользователя.
// var number = prompt("Введите число 1 или 2:");
//
// // Создаем конструкцию многозначного выбора, переключатель - switch,
// // которому в качестве выражения-селектора, передаем переменную - number.
// // ВНИМАНИЕ!
// // Тип значения выражения селектора и значений постоянных выражений операторов case должны совпадать.
//
// switch (number) { // (number) — выражение-селектор.
//
//     // В теле переключателя switch-case, создаем несколько операторов case,
//     // c постоянными выражениями равными  "1" и "2" соответственно.
//
//     // Если значение выражения-селектора совпадет с одним из значений постоянных выражений,
//     // то выполняется тело оператора case, постоянное выражение которого, совпало с выражением-селектора.
//
//     case "1":  // "1" — постоянное выражение.
//         {
//             document.write("Один");   // Ветвь 1
//         };
//         break; // Выход из переключателя.
//
//     case "2":  // "2" — постоянное выражение.
//         {
//             document.write("Два");     // Ветвь 2
//         };
//         break; // Выход из переключателя.
//
//
//         // Создаем (необязательный) оператор default, тело которого выполняется в случае,
//         // если значение выражения-селектора не совпадет ни с одним из значений постоянных выражений.
//     default:
//         {
//             document.write("Вы ввели значение отличное от 1 и 2.");  // Ветвь 8
//         };
//
//         // Если в переключателе отсутствует оператор default, то управление передается за пределы переключателя switch.
// }


// ----------------------------------------------------------------------
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------

// Тернарная условная операция.
//
// Тернарный (троичный) оператор [?:] .
// Тернарный оператор [?:], является сокращенной формой конструкции if ... else.
// [?:] - включает в себя три операнда - ( условие ? Если условие ИСТИННО : Если условие ЛОЖНО )
//
// Алгоритм работы тернарной операции: (логическое выражение) ? выражение 1 : выражение 2
//    1. Вычисляется логическое выражение (условие).
//    2. Если логическое выражение истинно, то вычисляется значение выражения выражение 1,
//       в противном случае — значение выражения выражение 2.
//    3. Вычисленное значение возвращается.

// var a = 1, b = 2, max = 0;
//
// // Переменной max, присваиваем возвращаемое значение тернарного оператора.
//
// max = (a > b) ? a : b;   // ЕСЛИ:  (a > b)  ТО:  вернуть a  ИНАЧЕ: вернуть b;
//
// document.write(max);

// ----------------------------------------------------------------------
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------

// Цикл 'while'

// var counter = 0;
//
// while (counter < 10) {
//     counter++;
//     document.write(counter + "<br>");
// };


// ----------------------------------------------------------------------
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------

// ПРИМЕР

// var str = "Угадайте задуманный цвет с пяти попыток.";
//
// var maxAttempt = 5;   // Допустимое количество попыток.
// var attempt = 0;      // Счетчик попыток.
// var color = "black";    // Задуманный цвет.
// var value;
//
// while (attempt < maxAttempt) {
//     attempt++;
//
//     value = prompt(str + " Попытка " + attempt, "");
//
//     if (value == null) {
//         break;
//     }
//
//     if (value != color) {
//         str = "Вы не угадали.";
//         continue;
//     }
//
//     document.write("<p>Поздравляем, Вы угадали с " + attempt + " попытки!</p>");
//     break;
// }
//
// document.write("<p>Конец игры!</p>");


// ----------------------------------------------------------------------
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------

// Цикл 'do-while'

// var counter = 0;
//
// do {
//     document.write(counter + "<br />");
//     counter++;
// } while (counter < 10);

// ----------------------------------------------------------------------
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------


// ПРИМЕР

// var input;
//
// do {
//     input = prompt("Введите некоторое значение.");
//     document.write("<p>" + input + "</p>");
// } while (input != null);

// ----------------------------------------------------------------------
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------

// Циклическая конструкция - for (цикл со счетчиком).

// // for ( Инициализация счетчика итераций; Условие; Изменение счетчика ) { Тело цикла }
//
// for (var counter = 0; counter < 3; counter++) {
//     document.write("<p>Counter = " + counter + "</P>");
// }
//
// // counter - доступен за пределами цикла for.
// document.write(counter);


// ----------------------------------------------------------------------
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------

// Оператор "break"

// var count = prompt("Сколько Вы хотите провести иттераций?");
// var exit = prompt("На какой итерации выйти из цикла?");
//
// for (var i = 0; i < count; i++) {
//     if (i == exit) {
//         break;
//     }
//     else {
//         document.write(i + "<br>");
//     }
// }

// ----------------------------------------------------------------------
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------

// Оператор "continue"

// var count = prompt("Сколько Вы хотите провести итераций?");
// var exit = prompt("Какое число вы не хотите увидеть?");
//
// for (var i = 0; i < count; i++) {
//     if (i == exit) {
//         document.write("<br>");
//         continue;
//     }
//     else {
//         document.write(i + "<br>");
//     }
// }

// ----------------------------------------------------------------------
// ----------------------------------------------------------------------
// ----------------------------------------------------------------------